// Generated by CoffeeScript 1.6.3
(function() {
  var BigBlueButtonApi, filterCustomParameters, include, replaceMobileProtocol, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  BigBlueButtonApi = (function() {
    function BigBlueButtonApi(url, salt, mobileKey) {
      this.url = url;
      this.salt = salt;
      this.mobileKey = mobileKey;
    }

    BigBlueButtonApi.prototype.getUrls = function(params, customCalls) {
      var call, joinAtt, joinAttMobile, joinMod, joinModMobile, ret, _elem, _i, _len;
      if (customCalls == null) {
        customCalls = null;
      }
      if (params == null) {
        params = {};
      }
      params.password = params.attendeePW;
      joinAtt = this.urlFor("join", params);
      joinAttMobile = replaceMobileProtocol(joinAtt);
      params.password = params.moderatorPW;
      joinMod = this.urlFor("join", params);
      joinModMobile = replaceMobileProtocol(joinMod);
      _elem = function(name, desc, url) {
        return {
          name: name,
          description: desc,
          url: url
        };
      };
      ret = [_elem('root', 'root', this.urlFor("", params)), _elem('create', 'create', this.urlFor("create", params)), _elem('join', 'join (as moderator)', joinMod), _elem('join', 'join (as attendee)', joinAtt), _elem('isMeetingRunning', 'isMeetingRunning', this.urlFor("isMeetingRunning", params)), _elem('getMeetingInfo', 'getMeetingInfo', this.urlFor("getMeetingInfo", params)), _elem('end', 'end', this.urlFor("end", params)), _elem('getMeetings', 'getMeetings', this.urlFor("getMeetings", params)), _elem('getDefaultConfigXML', 'getDefaultConfigXML', this.urlFor("getDefaultConfigXML", params)), _elem('setConfigXML', 'setConfigXML', this.urlFor("setConfigXML", params)), _elem('getRecordings', 'getRecordings', this.urlFor("getRecordings", params)), _elem('publishRecordings', 'publishRecordings', this.urlFor("publishRecordings", params)), _elem('deleteRecordings', 'deleteRecordings', this.urlFor("deleteRecordings", params)), _elem('join', 'join from mobile (as moderator)', joinModMobile), _elem('join', 'join from mobile (as attendee)', joinAttMobile), _elem('getTimestamp', 'mobile: getTimestamp', this.urlForMobileApi("getTimestamp", params)), _elem('getMeetings', 'mobile: getMeetings', this.urlForMobileApi("getMeetings", params)), _elem('create', 'mobile: create', this.urlForMobileApi("create", params))];
      if (customCalls != null) {
        for (_i = 0, _len = customCalls.length; _i < _len; _i++) {
          call = customCalls[_i];
          ret.push(_elem(call, "custom call: " + call, this.urlFor(call, params, false)));
        }
      }
      return ret;
    };

    BigBlueButtonApi.prototype.urlParamsFor = function(param) {
      switch (param) {
        case "create":
          return [["meetingID", true], ["name", true], ["attendeePW", false], ["moderatorPW", false], ["welcome", false], ["dialNumber", false], ["voiceBridge", false], ["webVoice", false], ["logoutURL", false], ["maxParticipants", false], ["record", false], ["duration", false], [/meta_\w+/, false], ["redirectClient", false], ["clientURL", false]];
        case "join":
          return [["fullName", true], ["meetingID", true], ["password", true], ["createTime", false], ["userID", false], ["webVoiceConf", false], ["configToken", false], ["avatarURL", false]];
        case "isMeetingRunning":
          return [["meetingID", true]];
        case "end":
          return [["meetingID", true], ["password", true]];
        case "getMeetingInfo":
          return [["meetingID", true], ["password", true]];
        case "getRecordings":
          return [["meetingID", true], [/meta_\w+/, false]];
        case "publishRecordings":
          return [["recordID", true], ["publish", true]];
        case "deleteRecordings":
          return [["recordID", true]];
        case "setConfigXML":
          return [["meetingID", true], ["configXML", true]];
      }
    };

    BigBlueButtonApi.prototype.filterParams = function(params, method) {
      var filters, r;
      filters = this.urlParamsFor(method);
      if ((filters == null) || filters.length === 0) {
        ({});
      } else {
        r = include(params, function(key, value) {
          var filter, _i, _len;
          for (_i = 0, _len = filters.length; _i < _len; _i++) {
            filter = filters[_i];
            if (filter[0] instanceof RegExp) {
              if (key.match(filter[0]) || key.match(/^custom_/)) {
                return true;
              }
            } else {
              if (key.match("^" + filter[0] + "$") || key.match(/^custom_/)) {
                return true;
              }
            }
          }
          return false;
        });
      }
      return filterCustomParameters(r);
    };

    BigBlueButtonApi.prototype.urlFor = function(method, params, filter) {
      var checksum, key, keys, param, paramList, query, url, _i, _len;
      if (filter == null) {
        filter = true;
      }
      if (filter) {
        params = this.filterParams(params, method);
      } else {
        params = filterCustomParameters(params);
      }
      url = this.url;
      paramList = [];
      if (params != null) {
        keys = Object.keys(params);
        keys = keys.sort();
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          if (key != null) {
            param = params[key];
          }
          if (param != null) {
            paramList.push("" + (this.encodeForUrl(key)) + "=" + (this.encodeForUrl(param)));
          }
        }
        if (paramList.length > 0) {
          query = paramList.join("&");
        }
      } else {
        query = '';
      }
      checksum = this.checksum(method, query);
      if (paramList.length > 0) {
        query = method + "?" + query;
        query += "&";
      } else {
        query = method + "?";
      }
      query += "checksum=" + checksum;
      return url + "/" + query;
    };

    BigBlueButtonApi.prototype.urlForMobileApi = function(method, params) {
      var matched, oldPat, query, url;
      url = this.urlFor(method, params, true);
      oldPat = new RegExp("bigbluebutton\\/api\\/" + method + "\\?");
      url = url.replace(oldPat, "demo/mobile.jsp?action=" + method + "&");
      url = url.replace(/[&]?checksum=.*$/, "");
      if (!url.match(/action=getTimestamp/)) {
        url = url + "&timestamp=" + new Date().getTime();
      }
      query = "";
      matched = url.match(/\?(.*)$/);
      if ((matched != null) && (matched[1] != null)) {
        query = matched[1];
      }
      return url = url + "&checksum=" + this.checksum(method, query, true);
    };

    BigBlueButtonApi.prototype.checksum = function(method, query, forMobile) {
      var str;
      query || (query = "");
      if ((forMobile != null) && forMobile) {
        str = query + this.mobileKey;
      } else {
        str = method + query + this.salt;
      }
      return Crypto.SHA1(str);
    };

    BigBlueButtonApi.prototype.encodeForUrl = function(value) {
      // encodeURIComponent doesn't escape !'()* but browsers do, so manually escape them.
      // Use + instead of %20 for space to match what the Java tools do.
      return encodeURIComponent(value).replace(/[!'()]/g, escape).replace(/\*/g, "%2A").replace(/%20/g, '+');
    };

    return BigBlueButtonApi;

  })();

  include = function(input, _function) {
    var key, value, _match, _obj;
    _obj = new Object;
    _match = null;
    for (key in input) {
      value = input[key];
      if (_function.call(input, key, value)) {
        _obj[key] = value;
      }
    }
    return _obj;
  };

  replaceMobileProtocol = function(url) {
    return url.replace(/http[s]?\:\/\//, "bigbluebutton://");
  };

  root.BigBlueButtonApi = BigBlueButtonApi;

  filterCustomParameters = function(params) {
    var key, v;
    for (key in params) {
      v = params[key];
      if (key.match(/^custom_/)) {
        params[key.replace(/^custom_/, "")] = v;
      }
    }
    for (key in params) {
      if (key.match(/^custom_/)) {
        delete params[key];
      }
    }
    return params;
  };

}).call(this);
